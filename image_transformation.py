'''usage: python image_transformation.py file_name angle_in_degrees'''import osimport sysimport cv2import imutilsfrom PIL import Imageimport xml.etree.ElementTree as et   import randomimport time from bounding_boxes import draw_box as dbimport numpy as npimport imutilsimport shutilimport timepath_to_folder = '/home/annus/Desktop/Folders/proper_staples_data_set/outputs/'+sys.argv[1]dest_folder = '/home/annus/Desktop/Folders/proper_staples_data_set/outputs/fixed_imags/'+sys.argv[1]if path_to_folder is not dest_folder:    try:        os.mkdir(dest_folder)    except FileExistsError:        print('deleting the already existing folder...')        shutil.rmtree(dest_folder)        os.mkdir(dest_folder)    images = os.listdir(path_to_folder)images = os.listdir(path_to_folder)def im_rotate(image_array, angle):    return Image(image_array).rotate(image_array, expanded=1)def test():    image_file = '00P3800000cqvteEAA#Amazon 5.jpg'    xml_file = '00P3800000cqvteEAA#Amazon 5.xml'    image_array = cv2.imread(image_file, 1)    # PIL_image = Image.open(image_file)    original_size = image_array.shape[:2]    i = 45    # for i in range(-int(sys.argv[1]), int(sys.argv[1]), 1):    #     if i == 0: continue    rotated_image = imutils.rotate(image_array, float(i))    d_image = db(np.asarray(rotated_image), xml_file, original_size, i, isrotated=True)    cv2.imwrite('/home/annus/Desktop/Folders/project/augmentation_testing/00P3800000eSmGaEAK#Invoice 4_'+str(i)+'.jpg', d_image)    i = 0    rotated_image = imutils.rotate(image_array, float(i))    d_image = db(np.asarray(rotated_image), xml_file, original_size, i, isrotated=False)    cv2.imwrite('/home/annus/Desktop/Folders/project/augmentation_testing/00P3800000eSmiFEAS#IMG_2204_'+str(i)+'.jpg', d_image)def jerk_image():    i = 0    for image in images:        i += 1        name, _ = os.path.splitext(image)        image_array = cv2.imread(os.path.join(path_to_folder, image), 1)        for m in range(-int(sys.argv[2]), int(sys.argv[2])):            rotated_image = imutils.rotate(image_array, m)            new_image_path = os.path.join(dest_folder, name+str(i)+'.jpg')            cv2.imwrite(new_image_path, rotated_image)            verbose = 'On {} / {} image, at angle: {}, \total images written: {}'.format(i, len(images), m, len(os.listdir(dest_folder)))            print('\b'*len(verbose), end='', flush=True)            print(verbose, end='')            time.sleep(0.01)    print("\n")def flip_image(which_side):    i = 0    for image in images:        name, _ = os.path.splitext(image)        i += 1        image_array = cv2.imread(os.path.join(path_to_folder, image), 1)        flipped = cv2.flip(image_array, which_side)        cv2.imwrite(os.path.join(dest_folder, name+str(which_side)+".jpg"), flipped)        verbose = '{} / {} done'.format(i, len(images))        print('\b'*len(verbose), end='', flush=True)        print(verbose, end='')    print('')def rotate_images():    '''image_list = []                for im_ in images:                     image_read = cv2.imread(os.path.join(path_to_folder, im_), 1)                    image_list.append((im_, image_read))                print('image list created! Found {} images'.format(len(image_list)))'''    #for i, (image_name, im) in enumerate(image_list):    print('total images: {}'.format(len(images)))    i = 0    for image_name in images:        im = cv2.imread(os.path.join(path_to_folder, image_name), 1)        cv2.namedWindow('image', cv2.WINDOW_NORMAL)        cv2.resizeWindow('image', 800, 800)        cv2.moveWindow('image', 0, 0)        cv2.imshow('image', im)        new_image = im.copy()        saved = False        read_key = cv2.waitKey(33)        while not saved:            while read_key == -1: read_key = cv2.waitKey(33)            if read_key is 0xFF & ord('r'):                new_image = imutils.rotate(new_image, -90)                cv2.namedWindow('image', cv2.WINDOW_NORMAL)                cv2.resizeWindow('image', 800, 800)                cv2.moveWindow('image', 0, 0)                cv2.imshow('image', new_image)                read_key = -1                time.sleep(0.1)            if read_key is 0xFF & ord('s'):                cv2.imwrite(os.path.join(dest_folder, image_name), new_image)                i += 1                verbose = 'image#'+str(i+1)+' saved'                print('\b'*len(verbose), end='', flush=True)                print(verbose, end='')                saved = True                read_key = -1                time.sleep(0.1)    print('')    def main():    i = 0    for image in images:        i += 1        image_array = cv2.imread(os.path.join(path_to_folder, image), 1)        rotated_image = imutils.rotate(image_array, -90)        cv2.imwrite(os.path.join(path_to_folder, image), rotated_image)        verbose = '{} / {} done'.format(i, len(images))        print('\b'*len(verbose), end='', flush=True)        print(verbose, end='')    print('')rotate_images()